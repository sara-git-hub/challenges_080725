CREATE TABLE Utilisateurs(
    id_utilisateur SERIAL PRIMARY KEY,
    nom VARCHAR(30),
    email VARCHAR(30),
    role VARCHAR(20) NOT NULL CHECK (role IN ('lecteur', 'bibliothecaire', 'admin'))
);

CREATE TABLE Livre(
    id_livre SERIAL PRIMARY KEY,
    titre VARCHAR(30),
    auteur VARCHAR(30),
	categorie VARCHAR(30),
    disponible BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE TABLE Emprunts(
    id_Emprunts SERIAL PRIMARY KEY,
    id_utilisateur INT,
    id_livre INT,
	date_emprunt DATE,
	date_retour_prevue DATE,
    date_retour_reelle DATE,
	CONSTRAINT fk_utilisateur FOREIGN KEY (id_utilisateur) REFERENCES Utilisateurs(id_utilisateur) ON DELETE CASCADE,
	CONSTRAINT fk_livre FOREIGN KEY (id_livre) REFERENCES Livre(id_livre) ON DELETE CASCADE
);

CREATE TABLE Commentaires(
    id_commentaire SERIAL PRIMARY KEY,
    id_utilisateur INT,
    id_livre INT,
	texte TEXT,
	note INT,
	CONSTRAINT fk_utilisateur_2 FOREIGN KEY (id_utilisateur) REFERENCES Utilisateurs(id_utilisateur) ON DELETE CASCADE,
	CONSTRAINT fk_livre_2 FOREIGN KEY (id_livre) REFERENCES Livre(id_livre) ON DELETE CASCADE
);

INSERT INTO Utilisateurs (nom, email, role)
VALUES
     ('Alice Martin', 'alice.martin@mail.com', 'lecteur'),
     ('John Doe', 'john.doe@mail.com', 'bibliothecaire'),
     ('Sarah Lopez', 'sarah.lopez@mail.com', 'lecteur'),
     ('Marc Dupont', 'marc.dupont@mail.com', 'admin'),
     ('Emma Bernard', 'emma.bernard@mail.com', 'bibliothecaire'),
     ('Thomas Durand', 'thomas.durand@mail.com', 'lecteur');

INSERT INTO Livre (titre, auteur, categorie, disponible)
VALUES
     ('L''Étranger', 'Albert Camus', 'Roman', TRUE),
	 ('1984', 'George Orwell', 'Science-fiction', FALSE),
	 ('Le Petit Prince', 'Antoine de Saint-Ex.', 'Conte', TRUE),
	 ('Dune', 'Frank Herbert', 'Science-fiction', FALSE),
	 ('Les Misérables', 'Victor Hugo', 'Classique', TRUE),
	 ('Sapiens', 'Yuval Noah Harari', 'Histoire', TRUE);

INSERT INTO Emprunts (id_utilisateur, id_livre, date_emprunt, date_retour_prevue,date_retour_reelle)
VALUES
     (1, 2, '2024-06-01', '2024-06-15', NULL),
   	 (3, 4, '2024-06-20', '2024-07-05', '2024-07-03'),
     (6, 2 , '2024-05-10', '2024-05-25', '2024-05-24'),
     (1, 4, '2024-07-01', '2024-07-15', NULL);

INSERT INTO Commentaires (id_utilisateur, id_livre, texte, note)
VALUES
     (1, 2, 'Un classique à lire absolument', 5),
     (3, 4, 'Très dense, mais fascinant', 4),
     (6, 2, 'Excellent, mais un peu long', 4),
     (1, 4, 'Très bon roman de SF', 5),
     (3, 1, 'Lecture facile et intéressante', 3);

Partie 1 : Requêtes SQL basiques

SELECT titre FROM Livre where disponible=True

SELECT * From Utilisateurs where role='bibliothecaire'

SELECT * 
FROM emprunts
WHERE date_retour_reelle IS null
AND date_retour_prevue< CURRENT_DATE;

SELECT COUNT(id_emprunts)
FROM emprunts

SELECT *
FROM commentaires
ORDER BY id_commentaire DESC
LIMIT 5;

SELECT u.nom, COUNT(e.id_emprunts)
FROM utilisateurs u
JOIN emprunts e ON e.id_utilisateur=u.id_utilisateur
GROUP BY u.nom

SELECT l.titre, l.auteur, e.id_livre
FROM livre l
LEFT OUTER JOIN emprunts e ON e.id_livre=l.id_livre
WHERE e.id_livre IS null

SELECT l.titre, l.auteur, AVG(c.note)
FROM livre l
JOIN commentaires c ON c.id_livre=l.id_livre
GROUP BY l.titre, l.auteur
ORDER BY AVG(c.note) DESC
LIMIT 3;


SELECT DISTINCT u.nom, l.categorie
FROM utilisateurs u
JOIN emprunts e ON e.id_utilisateur=u.id_utilisateur
JOIN livre l on l.id_livre=e.id_livre
WHERE l.categorie = 'Science-fiction'

UPDATE livre l
SET disponible = False
WHERE l.id_livre IN (SELECT e.id_livre FROM emprunts e WHERE e.date_retour_reelle IS NULL);












